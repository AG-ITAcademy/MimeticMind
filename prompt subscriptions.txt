I have this web application that uses Flask and Postgressql as a backed and bootstrap 5 in the frontend. The application is mostly complete, I have deployed a test version into a VPS server, and now I want to integrate it with Stripe. But first, I need to implement a subscription feature. Right now, all I have is a users table that keeps track of the app's users and is used for authentication. Here is the table SQLAlchemy model:

class User(db.Model, UserMixin):

    tablename = 'users'

    

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)

    email = db.Column(db.String(255), nullable=False, unique=True)

    full_name = db.Column(db.String(255), nullable=True)

    profile_picture = db.Column(db.String(255), nullable=True)

    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    last_login = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    password = db.Column(db.String(255), nullable=True) 

    is_confirmed = db.Column(db.Boolean, default=False)

    confirm_token = db.Column(db.String(100), nullable=True)

There will be three subscription tiers (as you can see in the screenshot). The starter and the advanced tier will have some rate limits for: maximum projects, maximum respondents per survey and maximum interactions per month (so the available interactions counter will have to be refilled each month for starter and advanced tiers). I also want to have the possibility of sending special invites to private preview customers. These invite links will be used to trigger Advanced subscriptions but these subscriptions will only be valid for one month, after which the customers can either pay to continue their advanced subscription or their subscription is downgraded to Starter. I will introduce the rate limiting in the corresponding modules myself, but I need some advice on the database structure and logic for implementing these subscription tiers and invitation system. Take it step by step and let me know if you need any additional infor for generating the answer. Don't forget, most of my app is already written so, instead of re-inventing the wheel, you should try to reuse as much as possible from the existing code base. So before writing any new code, ask first